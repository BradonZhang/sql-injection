{"version":3,"sources":["images/image1.png","images/image2.jpg","images/image3.png","images/image4.png","images/image5.png","slides/TitleSlide.tsx","components/slide.tsx","components/Ref.tsx","slides/WhatIsSqlSlide.tsx","slides/SqlInjectionIntroSlide.tsx","slides/WhatHappenedSlide.tsx","slides/AnalysisMethodSlide.tsx","slides/TakeawaysSlide.tsx","components/Citation.tsx","slides/ReferencesSlide.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SlideContainer","styled","div","TitleContainer","TitleText","h1","Subtitle","SubtitleText","h2","NameText","TitleSlide","props","background","TextContainer","ImageContainer","Caption","p","Ref","id","href","QueryResults","caption","WhatIsSqlSlide","useState","rows","setRows","username","setUsername","password","setPassword","type","value","onChange","e","target","onClick","users","filter","user","map","credit_card","key","className","src","image","alt","Injection","span","SqlInjectionIntroSlide","revealed","setRevealed","style","width","WhatHappenedSlide","AnalysisMethodSlide","TakeawaysSlide","Citation","children","citations","ReferencesSlide","citation","index","String","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ff51142.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.2e7f4cbd.png\";","module.exports = __webpack_public_path__ + \"static/media/image2.958f10d1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image3.8fbd32c6.png\";","module.exports = __webpack_public_path__ + \"static/media/image4.99e4c7b7.png\";","module.exports = __webpack_public_path__ + \"static/media/image5.e9202f30.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Slide from '../types/Slide';\r\n\r\nconst SlideContainer = styled.div`\r\n  font-family: Consolas, 'Courier New', Courier, monospace;\r\n  color: #00c000;\r\n  width: 100vw;\r\n  min-height: 100vh;\r\n  background-color: #202020;\r\n  overflow-x: hidden;\r\n  justify-content: center;\r\n  flex: 1;\r\n`;\r\n\r\nconst TitleContainer = styled.div`\r\n  padding: 15vh 0 5vh;\r\n`;\r\n\r\nconst TitleText = styled.h1`\r\n  font-size: 72px;\r\n`;\r\n\r\nconst Subtitle = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1;\r\n  padding: 5vh 0;\r\n`;\r\n\r\nconst SubtitleText = styled.h2`\r\n  opacity: 0.8;\r\n  margin: 0px;\r\n  width: 33%;\r\n`;\r\n\r\nconst NameText = styled.h1`\r\n  padding: 20px;\r\n`\r\n\r\nconst TitleSlide: Slide = (props) => {\r\n  return (\r\n    <SlideContainer>\r\n      <TitleContainer>\r\n        <TitleText>SQL Injection</TitleText>\r\n      </TitleContainer>\r\n      <Subtitle>\r\n        <SubtitleText>What it is</SubtitleText>\r\n        <SubtitleText>Why it happens</SubtitleText>\r\n        <SubtitleText>How to stop it</SubtitleText>\r\n      </Subtitle>\r\n      <NameText>Bradon Zhang</NameText>\r\n      <p>ENC3254: ECO Visualizing Failure</p>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default TitleSlide;\r\n","import styled from 'styled-components';\r\n\r\nexport interface SlideContainerProps {\r\n  background: 'light' | 'dark';\r\n}\r\n\r\nexport const SlideContainer = styled.div<SlideContainerProps>`\r\n  color: black;\r\n  width: 100%;\r\n  background-color: #${props => (\r\n    (props.background === 'light') ? 'e0e0e0' : 'd0d0d0'\r\n  )};\r\n  overflow-x: hidden;\r\n  justify-content: flex-start;\r\n  display: flex;\r\n  flex: 1;\r\n  text-align: left;\r\n`;\r\n\r\nexport const TextContainer = styled.div`\r\n  padding-left: 5%;\r\n  padding-right: 5%;\r\n  width: 40%;\r\n  flex: 1;\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Caption = styled.p`\r\n  padding: 0 10%;\r\n  width: 80%;\r\n  font-style: italic;\r\n  text-align: left;\r\n`;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\ninterface RefProps {\r\n  id: string;\r\n}\r\n\r\nconst Ref: FunctionComponent<RefProps> = ({ id }) => (\r\n  <a href={`#${id}`}>[{id}]</a>\r\n);\r\n\r\nexport default Ref;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  SlideContainer,\r\n  TextContainer,\r\n  ImageContainer,\r\n  Caption,\r\n} from '../components/slide';\r\nimport image from '../images/image1.png';\r\nimport Ref from '../components/Ref';\r\nimport Slide from '../types/Slide';\r\nimport User from '../types/User';\r\n\r\nimport { users } from './users.json';\r\n\r\nconst QueryResults = styled.div`\r\n  height: 20vh;\r\n  overflow-y: scroll;\r\n`;\r\n\r\nconst dummyUsername = 'SmartUser';\r\nconst dummyPassword = 'abcxyz123';\r\n\r\nconst caption = `Simplified model for web applications; user interfaces communicate with servers which modify databases using SQL`;\r\n\r\nconst WhatIsSqlSlide: Slide = (props) => {\r\n  const [rows, setRows] = useState<Array<User>>([]);\r\n  const [username, setUsername] = useState(dummyUsername);\r\n  const [password, setPassword] = useState(dummyPassword);\r\n\r\n  const handleClick = () => setRows(users.filter(\r\n    user => user.username === username && user.password === password)\r\n  );\r\n\r\n  const handleUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => (\r\n    setUsername(e.target.value)\r\n  );\r\n\r\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => (\r\n    setPassword(e.target.value)\r\n  );\r\n\r\n  return (\r\n    <SlideContainer background={'dark'}>\r\n      <TextContainer>\r\n        <h1>What is SQL?</h1>\r\n        <p>\r\n          <strong>SQL</strong> (<strong>S</strong>tructured{' '}\r\n          <strong>Q</strong>uery <strong>L</strong>anguage, commonly pronounced\r\n          \"sequel\") is a language used to execute queries on databases{' '}\r\n          <Ref id={'1'} />, <Ref id={'2'} />, <Ref id={'3'} />. A query is a\r\n          request to retrieve or modify the data in a database{' '}\r\n          <Ref id={'1'} />, <Ref id={'2'} />, <Ref id={'3'} />.\r\n        </p>\r\n        <p>\r\n          In web applications that use SQL, a user sends a request to the server\r\n          through a user-friendly interface <Ref id={'4'} />. The server then\r\n          processes the request, tells the database to run a SQL query, and\r\n          returns the corresponding data back to the user <Ref id={'4'} />.\r\n        </p>\r\n        <br />\r\n        <p>\r\n          For example, say we have a simple <code>users</code> table in our\r\n          database. This table will contain the <code>username</code>,{' '}\r\n          <code>password</code>, and <code>credit_card</code> of all our users.\r\n        </p>\r\n        <p>\r\n          Click the button to run the following query, and see what happens!\r\n        </p>\r\n        <p><code>\r\n          SELECT * FROM users WHERE username = '\r\n          <input\r\n            type='textbox'\r\n            value={username}\r\n            onChange={handleUsernameChange}\r\n          />\r\n          ' AND password = '\r\n          <input\r\n            type='textbox'\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n          ';\r\n        </code></p>\r\n        <p>\r\n          (You can edit the textboxes to try searching for different usernames\r\n          and passwords. It won't work unless you know them, though!)\r\n        </p>\r\n        <button onClick={handleClick}>Run Query</button>\r\n        <QueryResults>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>username</th>\r\n                <th>password</th>\r\n                <th>credit_card</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {rows.map(({ username, password, credit_card }) => (\r\n                <tr key={username}>\r\n                  <td>{username}</td>\r\n                  <td>{password}</td>\r\n                  <td>{credit_card}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </QueryResults>\r\n      </TextContainer>\r\n      <ImageContainer>\r\n        <img className={'side-image'} src={image} alt={caption} />\r\n        <Caption>{caption} <Ref id={'4'} />.</Caption>\r\n      </ImageContainer>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default WhatIsSqlSlide;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  SlideContainer,\r\n  TextContainer,\r\n  ImageContainer,\r\n  Caption,\r\n} from '../components/slide';\r\nimport image from '../images/image2.jpg';\r\nimport Ref from '../components/Ref';\r\nimport Slide from '../types/Slide';\r\n\r\nimport { users } from './users.json';\r\n\r\nconst QueryResults = styled.div`\r\n  height: 20vh;\r\n  overflow-y: scroll;\r\n`;\r\n\r\nconst Injection = styled.span`\r\n  color: #d00000;\r\n`;\r\n\r\nconst dummyUsername = 'SmartUser';\r\n\r\nconst caption = `2009 mugshot of Albert Gonzalez`;\r\nconst descriptor = `a hacker who stole 130 million credit card and debit card numbers using SQL injection attacks`;\r\n\r\nconst SqlInjectionIntroSlide: Slide = (props) => {\r\n  const [revealed, setRevealed] = useState(false);\r\n\r\n  const handleClick = () => setRevealed(true);\r\n\r\n  return (\r\n    <SlideContainer background={'light'}>\r\n      <ImageContainer>\r\n        <img\r\n          className={'side-image'}\r\n          src={image}\r\n          alt={caption}\r\n          style={{\r\n            width: '60%'\r\n          }}\r\n        />\r\n        <Caption>\r\n          {caption} <Ref id={'5'} />, {descriptor} <Ref id={'6'} />.\r\n        </Caption>\r\n      </ImageContainer>\r\n      <TextContainer>\r\n        <h1>SQL Injection: An Overview</h1>\r\n        <p>\r\n          <strong>SQL injection</strong> is a cyberattack technique{' '}\r\n          <Ref id={'1'} />, <Ref id={'2'} />, <Ref id={'3'} /> in which a user\r\n          manipulates a database into changing the SQL queries it is supposed to\r\n          run <Ref id={'1'} />. This is done by disguising fragments of SQL code\r\n          as normal user input <Ref id={'2'} />, <Ref id={'3'} />.\r\n        </p>\r\n        <br />\r\n        <p>\r\n          Returning to the previous example, say the user inputted their\r\n          password as <code><Injection>' OR 1=1;--</Injection></code>.\r\n        </p>\r\n        <p>\r\n          Click the button to run the following query, and notice what changed\r\n          from the last demo.\r\n        </p>\r\n        <p><code>\r\n          SELECT * FROM users WHERE username = '{dummyUsername}' AND password =\r\n          '<Injection>' OR 1=1;--</Injection>';\r\n        </code></p>\r\n        <button onClick={handleClick}>Run Query</button>\r\n        <QueryResults>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>username</th>\r\n                <th>password</th>\r\n                <th>credit_card</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {revealed && users.map(({ username, password, credit_card }) => (\r\n                <tr key={username}>\r\n                  <td>{username}</td>\r\n                  <td>{password}</td>\r\n                  <td>{credit_card}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </QueryResults>\r\n      </TextContainer>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default SqlInjectionIntroSlide;\r\n","import React from 'react';\r\n\r\nimport {\r\n  SlideContainer,\r\n  TextContainer,\r\n  ImageContainer,\r\n  Caption,\r\n} from '../components/slide';\r\nimport image from '../images/image3.png';\r\nimport Ref from '../components/Ref';\r\nimport Slide from '../types/Slide';\r\n\r\nconst caption = `OWASP Top 10 ranks web security risks based on how critical they are; injection (including SQL injection) ranked as number 1 in 2017`;\r\n\r\nconst WhatHappenedSlide: Slide = (props) => {\r\n  return (\r\n    <SlideContainer background={'dark'}>\r\n      <TextContainer>\r\n        <h1>What Happened?</h1>\r\n        <p>The query gave the information of all the users, not just one!</p>\r\n        <p>\r\n          The software engineers for our example application did not sanitize\r\n          user inputs. In other words, the application does not check if the\r\n          user's input would alter the SQL query <Ref id={'1'} />; user input is\r\n          directly inserted into the query, which is interpreted by the database\r\n          as entirely different instructions <Ref id={'1'} />, <Ref id={'4'} />.\r\n        </p>\r\n        <p>\r\n          In this case, <code>OR 1=1</code> is always true (1 always equals\r\n          1), so all users in the database satisfy the query. Hence, all users\r\n          show up in the final result, and the attacker has access to all users'\r\n          private information.\r\n        </p>\r\n        <p>\r\n          SQL injection attacks can be very costly and can put millions of\r\n          people's privacy at risk <Ref id={'6'} />. In 2017, injection\r\n          attacks were deemed as the highest priority web security risk{' '}\r\n          <Ref id={'7'} />.\r\n        </p>\r\n      </TextContainer>\r\n      <ImageContainer>\r\n        <img\r\n          className={'side-image'}\r\n          src={image}\r\n          alt={caption}\r\n          style={{\r\n            width: '60%'\r\n          }}\r\n        />\r\n        <Caption>{caption} <Ref id={'7'} />.</Caption>\r\n      </ImageContainer>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default WhatHappenedSlide;\r\n","import React from 'react';\r\n\r\nimport {\r\n  SlideContainer,\r\n  TextContainer,\r\n  ImageContainer,\r\n  Caption,\r\n} from '../components/slide';\r\nimport image from '../images/image4.png';\r\nimport Ref from '../components/Ref';\r\nimport Slide from '../types/Slide';\r\n\r\nconst caption = `Security experts detect security vulnerabilities much more accurately than automatic web scanning services (VS1 through VS4); web scanning services often falsely detected vulnerabilities`;\r\n\r\nconst AnalysisMethodSlide: Slide = (props) => {\r\n  return (\r\n    <SlideContainer background={'light'}>\r\n      <ImageContainer>\r\n        <img className={'side-image'} src={image} alt={caption} />\r\n        <Caption>{caption} <Ref id={'8'} />.</Caption>\r\n      </ImageContainer>\r\n      <TextContainer>\r\n        <h1>Analysis Method: Penetration Testing</h1>\r\n        <p>\r\n          <strong>Penetration testing</strong> (pen-testing) is a preventative\r\n          destructive method of failure analysis which aims to find holes in an\r\n          application's security{' '}\r\n          <Ref id={'8'} />, <Ref id={'9'} />, <Ref id={'10'} />.\r\n        </p>\r\n        <p>\r\n          Testers attack a version of the application to try to find weaknesses\r\n          or security flaws; testing often includes SQL injection attacks{' '}\r\n          <Ref id={'8'} />, <Ref id={'9'} />.\r\n        </p>\r\n        <p>\r\n          If penetration testers can access information they are not supposed\r\n          to, developers can change their code to eliminate the security flaws\r\n          before shipping an application to production{' '}\r\n          <Ref id={'8'} />, <Ref id={'10'} />.\r\n        </p>\r\n        <p>\r\n          Cybersecurity is important! Hire professionals to test an\r\n          application's security.\r\n        </p>\r\n      </TextContainer>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default AnalysisMethodSlide;\r\n","import React from 'react';\r\n\r\nimport {\r\n  SlideContainer,\r\n  TextContainer,\r\n  ImageContainer,\r\n  Caption,\r\n} from '../components/slide';\r\nimport Slide from '../types/Slide';\r\nimport image from '../images/image5.png';\r\nimport Ref from '../components/Ref';\r\n\r\nconst caption = `Python's sqlite3 documentation warns against SQL injection`;\r\n\r\nconst TakeawaysSlide: Slide = (props) => {\r\n  return (\r\n    <SlideContainer background={'dark'}>\r\n      <TextContainer>\r\n        <h1>Takeaways</h1>\r\n        <p>\r\n          The explored example is a simplification. Real applications have\r\n          database schemas that are much more complicated, and real applications\r\n          (hopefully) avoid storing passwords in plain text.\r\n        </p>\r\n        <p>\r\n          However, the takeaway for developers is the same: user input should\r\n          {' '}<strong>not</strong> be trusted. Sanitize all user input!\r\n        </p>\r\n        <p>\r\n          Fortunately, many resources are available to responsible software\r\n          engineers to make sanitation easy. SQL libraries in many different\r\n          languages, such as{' '}\r\n          <a href='https://docs.python.org/3/library/sqlite3.html' target='blank'>\r\n            Python\r\n          </a>{' '}<Ref id={'11'} />,\r\n          have user input sanitation built in{' '}\r\n          <Ref id={'1'} />, <Ref id={'11'} />.\r\n        </p>\r\n        <p>\r\n          With just some simple integration of mindful coding practices and\r\n          preventative methods such as penetration testing, web applications\r\n          become that much more secure.\r\n        </p>\r\n        <p>\r\n          (Bonus image: XKCD has a{' '}\r\n          <a href='https://xkcd.com/327/' target='blank'>relevant comic</a>\r\n          {' '}about SQL injection.)\r\n        </p>\r\n      </TextContainer>\r\n      <ImageContainer>\r\n        <img className={'side-image'} src={image} alt={caption} />\r\n        <Caption>{caption} <Ref id={'11'} />.</Caption>\r\n      </ImageContainer>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default TakeawaysSlide;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\ninterface CitationProps {\r\n  id: string;\r\n  children: any;\r\n}\r\n\r\nconst Citation: FunctionComponent<CitationProps> = ({ id, children }) => (\r\n  <p id={id}><a href={`#${id}`}>[{id}]</a> {children}</p>\r\n);\r\n\r\nexport default Citation;\r\n","import React from 'react';\r\nimport Slide from '../types/Slide';\r\nimport styled from 'styled-components';\r\nimport Citation from '../components/Citation';\r\n\r\nconst citations = [\r\n  <>P. Vats and A. Saha, “An Overview of SQL Injection Attacks,” <em>SSRN Electronic Journal</em>, 2019.</>,\r\n  <>A. Alazab and A. Khresiat, “New Strategy for Mitigating of SQL Injection Attack,” <em>International Journal of Computer Applications</em>, vol. 154, no. 11, pp. 1–10, 2016.</>,\r\n  <>R. Agarwal and S. Sirsikar, “An Efficient Technique for finding SQL Injection using Reverse Proxy Server,” 2019.</>,\r\n  <>A. Leff and J. Rayfield, “Web-application development using the Model/View/Controller design pattern,” <em>Proceedings Fifth IEEE International Enterprise Distributed Object Computing Conference</em>, 2001.</>,\r\n  <>U.S. Secret Service/US Attorney for New Jersey, <em>Albert-gonzalez.jpg</em>. Wikimedia Commons, 2009.</>,\r\n  <>R. Van Luvender, “Fraud Trends in 2010: Top Threats From a Growing Underground Economy,” FirstData, 2010.</>,\r\n  <>P. Ferrara et al., “Static Analysis for the OWASP IoT Top 10 2018,” <em>Proceedings of SPIoT, 19</em>, 2019.</>,\r\n  <>N. Antunes and M. Vieira, “Penetration Testing for Web Services,” <em>Computer</em>, vol. 47, no. 2, pp. 30–36, 2014.</>,\r\n  <>N. Antunes and M. Vieira, “Comparing the Effectiveness of Penetration Testing and Static Code Analysis on the Detection of SQL Injection Vulnerabilities in Web Services,” <em>2009 15th IEEE Pacific Rim International Symposium on Dependable Computing</em>, 2009.</>,\r\n  <>B. Nagpal, N. Singh, N. Chauhan, and A. Panesar, “Tool based implementation of SQL injection for penetration testing,” <em>International Conference on Computing, Communication & Automation</em>, 2015.</>,\r\n  <>Python Software Foundation, “sqlite3 - DB-API 2.0 interface for SQLite databases¶,” <em>sqlite3 - DB-API 2.0 interface for SQLite databases - Python 3.8.3 documentation</em>. [Online]. Available: https://docs.python.org/3/library/sqlite3.html. [Accessed: 27-May-2020].</>,\r\n];\r\n\r\nconst SlideContainer = styled.div`\r\n  font-family: Consolas, 'Courier New', Courier, monospace;\r\n  color: #00c000;\r\n  width: 100vw;\r\n  background-color: #202020;\r\n  overflow-x: hidden;\r\n  justify-content: center;\r\n  flex: 1;\r\n  text-align: left;\r\n`;\r\n\r\nconst TextContainer = styled.div`\r\n  width: 90%;\r\n  padding: 0 5%;\r\n`;\r\n\r\nconst ReferencesSlide: Slide = (props) => {\r\n  return (\r\n    <div>\r\n      <SlideContainer>\r\n        <TextContainer>\r\n          <h1>References</h1>\r\n          {citations.map((citation, index) => (\r\n            <Citation id={String(index + 1)}>{citation}</Citation>\r\n          ))}\r\n        </TextContainer>\r\n      </SlideContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReferencesSlide;\r\n","import React from 'react';\nimport './App.css';\nimport TitleSlide from './slides/TitleSlide';\nimport WhatIsSqlSlide from './slides/WhatIsSqlSlide';\nimport SqlInjectionIntroSlide from './slides/SqlInjectionIntroSlide';\nimport WhatHappenedSlide from './slides/WhatHappenedSlide';\nimport AnalysisMethodSlide from './slides/AnalysisMethodSlide';\nimport TakeawaysSlide from './slides/TakeawaysSlide';\nimport ReferencesSlide from './slides/ReferencesSlide';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TitleSlide />\n      <WhatIsSqlSlide />\n      <SqlInjectionIntroSlide />\n      <WhatHappenedSlide />\n      <AnalysisMethodSlide />\n      <TakeawaysSlide />\n      <ReferencesSlide />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
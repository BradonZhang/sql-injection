{"version":3,"sources":["slides/TitleSlide.tsx","slides/WhatIsSqlSlide.tsx","slides/SqlInjectionIntroSlide.tsx","slides/WhatHappenedSlide.tsx","slides/AnalysisMethodSlide.tsx","slides/TakeawaysSlide.tsx","slides/ReferencesSlide.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SlideContainer","styled","div","TitleContainer","TitleText","h1","Subtitle","SubtitleText","h2","NameText","TitleSlide","props","TextContainer","QueryResults","emptyUser","username","password","credit_card","WhatIsSqlSlide","useState","rows","setRows","setUsername","setPassword","type","value","onChange","e","target","onClick","users","filter","user","map","key","Injection","span","SqlInjectionIntroSlide","revealed","setRevealed","WhatHappenedSlide","AnalysisMethodSlide","TakeawaysSlide","href","ReferencesSlide","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20cb6ef5.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Slide from '../types/Slide';\r\nimport './TitleSlide.css';\r\n\r\nconst SlideContainer = styled.div`\r\n  font-family: Consolas, 'Courier New', Courier, monospace;\r\n  color: #00c000;\r\n  width: 100vw;\r\n  min-height: 100vh;\r\n  background-color: #202020;\r\n  overflow-x: hidden;\r\n  justify-content: center;\r\n  flex: 1;\r\n`;\r\n\r\nconst TitleContainer = styled.div`\r\n  padding: 15vh 0 5vh;\r\n`;\r\n\r\nconst TitleText = styled.h1`\r\n  font-size: 72px;\r\n`;\r\n\r\nconst Subtitle = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1;\r\n  padding: 5vh 0;\r\n`;\r\n\r\nconst SubtitleText = styled.h2`\r\n  opacity: 0.8;\r\n  margin: 0px;\r\n  width: 33%;\r\n`;\r\n\r\nconst NameText = styled.h1`\r\n  padding: 20px;\r\n`\r\n\r\nconst TitleSlide: Slide = (props) => {\r\n  return (\r\n    <SlideContainer>\r\n      <TitleContainer>\r\n        <TitleText>SQL Injection</TitleText>\r\n      </TitleContainer>\r\n      <Subtitle>\r\n        <SubtitleText>What it is</SubtitleText>\r\n        <SubtitleText>Why it happens</SubtitleText>\r\n        <SubtitleText>How to stop it</SubtitleText>\r\n      </Subtitle>\r\n      <NameText>Bradon Zhang</NameText>\r\n      <p>ENC3254: ECO Visualizing Failure</p>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default TitleSlide;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Slide from '../types/Slide';\r\nimport User from '../types/User';\r\nimport './TitleSlide.css';\r\n\r\nimport { users } from './users.json';\r\n\r\nconst SlideContainer = styled.div`\r\n  color: #000000;\r\n  width: 100vw;\r\n  background-color: #d0d0d0;\r\n  overflow-x: hidden;\r\n  justify-content: center;\r\n  flex: 1;\r\n  text-align: left;\r\n`;\r\n\r\nconst TextContainer = styled.div`\r\n  width: 40%;\r\n  padding-left: 10%;\r\n`;\r\n\r\nconst QueryResults = styled.div`\r\n  height: 20vh;\r\n  overflow-y: scroll;\r\n`;\r\n\r\nconst dummyUsername = 'SmartUser';\r\nconst dummyPassword = 'abcxyz123';\r\nconst emptyUser = {\r\n  username: '',\r\n  password: '',\r\n  credit_card: ''\r\n};\r\n\r\nconst WhatIsSqlSlide: Slide = (props) => {\r\n  const [rows, setRows] = useState<Array<User>>([emptyUser]);\r\n  const [username, setUsername] = useState(dummyUsername);\r\n  const [password, setPassword] = useState(dummyPassword);\r\n\r\n  const handleClick = () => setRows(users.filter(\r\n    user => user.username === username && user.password === password)\r\n  );\r\n\r\n  const handleUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => (\r\n    setUsername(e.target.value)\r\n  );\r\n\r\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => (\r\n    setPassword(e.target.value)\r\n  );\r\n\r\n  return (\r\n    <SlideContainer>\r\n      <TextContainer>\r\n        <h1>What is SQL?</h1>\r\n        <p><strong>SQL</strong> (<strong>S</strong>tructured <strong>Q</strong>uery <strong>L</strong>anguage) is a text language used to execute queries on databases. A query is a request to retrieve or modify the data in a database.</p>\r\n        <p>In web applications that use SQL, a user sends a request to the server through a user-friendly interface. The server then processes the request, tells the database to run a SQL query, and returns the corresponding data back to the user.</p>\r\n        <br />\r\n        <p>For example, let's say we have a simple <code>users</code> table in our database. This table will contain the <code>username</code>, <code>password</code>, and <code>credit_card</code> of all our users.</p>\r\n        <p>Click the button to run the following query, and see what happens!</p>\r\n        <p><code>SELECT * FROM users WHERE username = '\r\n          <input type='textbox' value={username} onChange={handleUsernameChange} />\r\n          ' AND password = '\r\n          <input type='textbox' value={password} onChange={handlePasswordChange} />\r\n          ';</code></p>\r\n        <p>(You can edit the textboxes to try searching for different usernames and passwords. It won't work unless you know them, though!)</p>\r\n        <button onClick={handleClick}>Run Query</button>\r\n        <QueryResults>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>username</th>\r\n                <th>password</th>\r\n                <th>credit_card</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {rows.map(({ username, password, credit_card }) => (\r\n                <tr key={username}>\r\n                  <td>{username}</td>\r\n                  <td>{password}</td>\r\n                  <td>{credit_card}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </QueryResults>\r\n      </TextContainer>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default WhatIsSqlSlide;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Slide from '../types/Slide';\r\nimport './TitleSlide.css';\r\n\r\nimport { users } from './users.json';\r\n\r\nconst SlideContainer = styled.div`\r\n  color: black;\r\n  width: 100vw;\r\n  background-color: #e0e0e0;\r\n  overflow-x: hidden;\r\n  justify-content: center;\r\n  flex: 1;\r\n  text-align: left;\r\n`;\r\n\r\nconst TextContainer = styled.div`\r\n  width: 40%;\r\n  padding-left: 10%;\r\n`;\r\n\r\nconst QueryResults = styled.div`\r\n  height: 20vh;\r\n  overflow-y: scroll;\r\n`;\r\n\r\nconst Injection = styled.span`\r\n  color: #d00000;\r\n`;\r\n\r\nconst dummyUsername = 'SmartUser';\r\n\r\nconst SqlInjectionIntroSlide: Slide = (props) => {\r\n  const [revealed, setRevealed] = useState(false);\r\n\r\n  const handleClick = () => setRevealed(true);\r\n\r\n  return (\r\n    <SlideContainer>\r\n        <TextContainer>\r\n        <h1>SQL Injection: An Overview</h1>\r\n        <p><strong>SQL injection</strong> is a cyberattack technique in which a user tricks a database into changing the SQL queries it's supposed to run.</p>\r\n        <p>This is done by disguising fragments of SQL code as normal user input.</p>\r\n        <br />\r\n        <p>Returning to the previous example, let's say the user inputted their password as <code><Injection>' OR 1=1;--</Injection></code>.</p>\r\n        <p>Click the button to run the following query, and notice what changed from the last demo.</p>\r\n        <p><code>SELECT * FROM users WHERE username = '{dummyUsername}' AND password = '<Injection>' OR 1=1;--</Injection>';</code></p>\r\n        <button onClick={handleClick}>Run Query</button>\r\n        <QueryResults>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>username</th>\r\n                <th>password</th>\r\n                <th>credit_card</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {revealed && users.map(({ username, password, credit_card }) => (\r\n                <tr key={username}>\r\n                  <td>{username}</td>\r\n                  <td>{password}</td>\r\n                  <td>{credit_card}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </QueryResults>\r\n      </TextContainer>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default SqlInjectionIntroSlide;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Slide from '../types/Slide';\r\nimport './TitleSlide.css';\r\n\r\nconst SlideContainer = styled.div`\r\n  color: black;\r\n  width: 100vw;\r\n  background-color: #d0d0d0;\r\n  overflow-x: hidden;\r\n  justify-content: center;\r\n  flex: 1;\r\n  text-align: left;\r\n`;\r\n\r\nconst TextContainer = styled.div`\r\n  width: 40%;\r\n  padding-left: 10%;\r\n`;\r\n\r\nconst WhatHappenedSlide: Slide = (props) => {\r\n  return (\r\n    <SlideContainer>\r\n        <TextContainer>\r\n        <h1>What Happened?</h1>\r\n        <p>The software engineers for our example application did not sanitize user inputs.</p>\r\n        <p>In other words, the application does not check if the user's input would alter the SQL query; user input is directly inserted into the query, which is interpreted by the database as something else entirely.</p>\r\n        <p>In this particular case, <code>OR 1=1</code> is always true (1 always equals 1), so all users in the database satisfy the query. Hence, all users show up in the final result, and the attacker has access to all users' private information.</p>\r\n        <p>SQL injection attacks can be very costly and can put millions of people's privacy at risk. As of 2017, injection attacks remain the most common type of cyberattack.</p>\r\n      </TextContainer>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default WhatHappenedSlide;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Slide from '../types/Slide';\r\nimport './TitleSlide.css';\r\n\r\nconst SlideContainer = styled.div`\r\n  color: black;\r\n  width: 100vw;\r\n  background-color: #e0e0e0;\r\n  overflow-x: hidden;\r\n  justify-content: center;\r\n  flex: 1;\r\n  text-align: left;\r\n`;\r\n\r\nconst TextContainer = styled.div`\r\n  width: 40%;\r\n  padding-left: 10%;\r\n`;\r\n\r\nconst AnalysisMethodSlide: Slide = (props) => {\r\n  return (\r\n    <SlideContainer>\r\n        <TextContainer>\r\n        <h1>Analysis Method: Penetration Testing</h1>\r\n        <p><strong>Penetration testing</strong> (pen-testing) is a preventative destructive method of failure analysis which aims to find holes in an application's security.</p>\r\n        <p>Testers attack a version of the application to try to find weaknesses or security flaws; testing often includes SQL injection attacks.</p>\r\n        <p>If penetration testers can access information they're not supposed to, developers can change their code to eliminate the security flaws before shipping an application to production.</p>\r\n        <p>Cybersecurity is important! It's best to hire professionals to test an application's security.</p>\r\n      </TextContainer>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default AnalysisMethodSlide;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Slide from '../types/Slide';\r\nimport './TitleSlide.css';\r\n\r\nconst SlideContainer = styled.div`\r\n  color: black;\r\n  width: 100vw;\r\n  background-color: #d0d0d0;\r\n  overflow-x: hidden;\r\n  justify-content: center;\r\n  flex: 1;\r\n  text-align: left;\r\n`;\r\n\r\nconst TextContainer = styled.div`\r\n  width: 40%;\r\n  padding-left: 10%;\r\n`;\r\n\r\nconst TakeawaysSlide: Slide = (props) => {\r\n  return (\r\n    <SlideContainer>\r\n        <TextContainer>\r\n        <h1>Takeaways</h1>\r\n        <p>\r\n          Clearly, the example given is a simplification. Real applications have\r\n          database schemas that are much more complicated, and real applications\r\n          (hopefully) don't store passwords in plain text.\r\n        </p>\r\n        <p>\r\n          However, the takeaway for developers is the same: user input should\r\n          {' '}<strong>not</strong> be trusted. Sanitize all user input!\r\n        </p>\r\n        <p>\r\n          Fortunately, many resources are available to responsible software\r\n          engineers to make sanitation easy. SQL libraries in many different\r\n          languages, such as\r\n          <a href='https://docs.python.org/3/library/sqlite3.html' target='blank'>\r\n            Python\r\n          </a>\r\n          , have user input sanitation built in.</p>\r\n        <p>With just some simple integration of mindful coding practices and preventative methods such as penetration testing, web applications become that much more secure.</p>\r\n        <br />\r\n        <p>(Bonus: XKCD has a <a href='https://xkcd.com/327/' target='blank'>relevant comic</a> about SQL injection.)</p>\r\n      </TextContainer>\r\n    </SlideContainer>\r\n  );\r\n};\r\n\r\nexport default TakeawaysSlide;\r\n","import React from 'react';\r\nimport Slide from '../types/Slide';\r\nimport styled from 'styled-components';\r\n\r\nconst SlideContainer = styled.div`\r\n  font-family: Consolas, 'Courier New', Courier, monospace;\r\n  color: #00c000;\r\n  width: 100vw;\r\n  background-color: #202020;\r\n  overflow-x: hidden;\r\n  justify-content: center;\r\n  flex: 1;\r\n  text-align: left;\r\n`;\r\n\r\nconst TextContainer = styled.div`\r\n  width: 80%;\r\n  padding: 0 10%;\r\n`;\r\n\r\nconst ReferencesSlide: Slide = (props) => {\r\n  return (\r\n    <div>\r\n      <SlideContainer>\r\n        <TextContainer>\r\n          <h1>References</h1>\r\n        </TextContainer>\r\n      </SlideContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReferencesSlide;\r\n","import React from 'react';\nimport './App.css';\nimport TitleSlide from './slides/TitleSlide';\nimport WhatIsSqlSlide from './slides/WhatIsSqlSlide';\nimport SqlInjectionIntroSlide from './slides/SqlInjectionIntroSlide';\nimport WhatHappenedSlide from './slides/WhatHappenedSlide';\nimport AnalysisMethodSlide from './slides/AnalysisMethodSlide';\nimport TakeawaysSlide from './slides/TakeawaysSlide';\nimport ReferencesSlide from './slides/ReferencesSlide';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TitleSlide />\n      <WhatIsSqlSlide />\n      <SqlInjectionIntroSlide />\n      <WhatHappenedSlide />\n      <AnalysisMethodSlide />\n      <TakeawaysSlide />\n      <ReferencesSlide />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}